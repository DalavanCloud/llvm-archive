#!/bin/sh
#                                  build script
# 
# This file was developed by Reid Spencer and is distributed under the
# University of Illinois Open Source License. See LICENSE.TXT for details.
# 
#===------------------------------------------------------------------------===#
# This script allows LLVM modules to be checked out, configured and built all in
# one step.  Use it like this:
#
#    cd llvm-top
#    ./build {module_names} {configure_options} {build_options}
#
# where:
#    {module_names} is a list of modules you want to configure (e.g. llvm, hlvm)
#    {configure_options} start with -- and are passed to the configure tool
#      of *all* the modules you are building that need configuration.
#    {build_options} contain an = and are passed to the build tool of *all*
#      the modules you are building.
#
# Note that the script will checkout and configure any dependent modules as well
# as the ones specified in {module_names} so it is only necessary to specify the
# minimal set you're interested in.

# Get the library code
. ./library.sh

# Process the arguments so that anything starting with - is passed down to the
# configure scripts while anything else is a module name. Collect the arguments
# in appropriate variables for later use.
for arg in "$@" ; do 
  case "$arg" in
    VERBOSE=*)
      VERBOSE=`echo "$VERBOSE" | sed -e 's/VERBOSE=//'`
      ;;
    -*)
      BUILD_OPTS="$BUILD_ARGS $arg"
      ;;
    *=*)
      BUILD_PARAMS="$BUILD_PARAMS $arg"
      ;;
    *)
      MODULE_NAMES="$MODULE_NAMES $arg"
  esac
done

# Get (and possibly check out) the set of modules and their dependencies. This
# sets the MODULE_DEPENDENCIES variable to the set of module names that should
# be configured, in the correct order (least dependent first, no duplicates).
msg 1 "Checking out dependencies"
MODULE_DEPENDENCIES=""
get_module_dependencies $MODULE_NAMES

build_a_module() {
  module="$1"
  get_module_info $module BuildCmd
  if test -z "$MODULE_INFO_VALUE" ; then
    msg 0 "Module $module has no BuildCmd entry so it will not be built."
    return 0
  fi
  build_command="$MODULE_INFO_VALUE"
  build_command="$build_command $BUILD_OPTS"
  build_command="$build_command MODULE="$module" LLVM_TOP=$LLVM_TOP "
  build_command="$build_command PREFIX=$INSTALL_PREFIX $BUILD_PARAMS" 
  msg 1 "Building Module $module with this command:"
  msg 1 "  $build_command"
  cd $module
  $build_command || die $? "Can't build $module"
  cd $LLVM_TOP
}
# Now that we have a list of dependent modules, we must configure each of them
# according to the specifications of the module.
for mod in $MODULE_DEPENDENCIES ; do
  build_a_module "$mod"
done

# Just indicate what modules we configured
msg 1 Modules built:"$MODULE_DEPENDENCIES".
